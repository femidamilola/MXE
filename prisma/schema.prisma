// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String    @id @default(uuid())
  pin               String?
  mobileNumber      String     @unique
  isEmailVerified   Boolean     @default(false) 
  isGoogleUser      Boolean     @default(false)
  isIosUser         Boolean     @default(false)
  countryCode       String?     @default("234")
  isMobileVerified  Boolean     @default(false)
  email            String?    @unique
  otp               Token?
  firstName        String?
  lastName         String?
  mxeTag           String?   @unique
  isAccountVerified Boolean   @default(false)
  role    Role   @default(USER)
  profilePicture   String?
  wallet Wallet?
  walletTransactions WalletTransaction[] @relation("owner")
  walletTransactionsSecondary WalletTransaction[] @relation("secondaryParty")
  accountVerification   AccountVerification?
  bvn             String?
  nationalIdCardUrl    String?
  beneficiaries     Wallet[]  @relation("beneficiaries")
  createdAt         DateTime  @default(now())
  updatedAt DateTime @updatedAt
  debitTransactions Transaction[] @relation("Sender")
  creditTransactions Transaction[] @relation("Receiver")
}

model Token {
  id                      String    @id @default(uuid())
  account                 Account      @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)  
  accountId               String    @unique
  token                   String
  createdAt               DateTime  @default(now())
}


enum Role {
  ADMIN
  USER
}

model Wallet{
  id              String      @id @default(uuid())
  account         Account     @relation( fields: [email], references: [email], onDelete: Cascade, onUpdate: Cascade)
  email            String      @unique
  virualAccount VirtualAccount?   
  virtualCard   VirtualCard?
  balance         Float       @default(0)
  createdAt       DateTime  @default(now())
  mxeTag        String?
  updatedAt DateTime    @updatedAt
  accountBeneficiaries Account[] @relation("beneficiaries")
}

model VirtualAccount {
  id              String      @id @default(uuid())
  wallet         Wallet     @relation(fields: [email], references: [email], onDelete: Cascade, onUpdate: Cascade)
  email           String      @unique
  accountNumber   String      @unique
  bankName    String
  transactionRef   String
  flwRef        String
  createdAt       DateTime  @default(now())
}

model VirtualCard {
  id              String      @id @default(uuid())
  wallet         Wallet     @relation(fields: [email], references: [email], onDelete: Cascade, onUpdate: Cascade)
  email           String      @unique
  currency   Currency  @default(NGN)
  firstName        String
  lastName         String
  phone           String
  cardType        String
  expiration      String
  cvv             String
  cardId          String
  cardPan         String
  transactionRef   String?
  isActive        Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WalletTransaction {
  id              String      @id @default(uuid())
  account Account @relation(name: "owner", fields: [accountEmail], references: [email], onUpdate: Cascade)
  accountEmail String
  secondaryParty Account @relation(name: "secondaryParty", fields: [secondaryEmail], references: [email], onUpdate: Cascade)
  secondaryEmail String
  isInflow Boolean  @default(true)
  paymentMethod PaymentMethod
  status TransactionStatus @default(PENDING)
  amount Float
  type TransactionType @default(TRANSFER)
  transactionRef   String
  currency  Currency  @default(NGN)
  ownerMxeTag   String?
  secondaryMxeTag String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Transaction {
  id        String      @id @default(uuid())
  transactionRef   String
  mobileNumber  String?
  amount      Float
  flwRef String?
  name      String?
  currency   Currency  @default(NGN)
  transactionTime DateTime @default(now())
  paymentGateway PaymentGateway @default(FLUTTERWAVE)
  sender Account @relation("Sender", fields: [senderEmail], references: [email], onDelete: Cascade, onUpdate: Cascade)
  senderEmail String
  receiver Account @relation("Receiver", fields: [receiverEmail], references: [email], onDelete: Cascade, onUpdate: Cascade)
  receiverEmail String
  type TransactionType @default(TRANSFER)
  status TransactionStatus @default(PENDING)
}

enum PaymentGateway {
  PAYSTACK
  FLUTTERWAVE
  STRIPE
  PAYPAL
  WALLET
}

enum PaymentMethod {
  DEFI
  CARD
  TRANSFER
}

enum Currency {
  NGN
  USD
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum TransactionType {
  TRANSFER
  PAYMENT
  BILL_PAYMENT
  WITHDRAWAL
  DEPOSIT
}

model AccountVerification {
  id              String      @id @default(uuid())
  account         Account      @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)  
  accountId           String    @unique
  verificationStatus  VerificationStatus   @default(UN_VERIFIED)
  createdAt DateTime @default(now())
  dateVerified  DateTime @updatedAt
}

enum VerificationStatus {
  PENDING
  VERIFIED
  UN_VERIFIED
}
