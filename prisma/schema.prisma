// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String      @id @default(uuid())
  pin               String? 
  email             String?     @unique
  isEmailVerified   Boolean     @default(false) 
  isGoogleUser      Boolean     @default(false)
  isIosUser         Boolean     @default(false)
  mobileNumber      String?     @unique
  countryCode       String?     @default("234")
  isMobileVerified  Boolean     @default(false)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  otp               Token?
  account           Account?
  beneficiaries     Wallet[]  @relation("beneficiaries")
}

model Token {
  id                      String    @id @default(uuid())
  user                    User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)  
  userId                  String    @unique
  token                   String
  createdAt               DateTime  @default(now())
}

model Account {
  id               String    @id @default(uuid())
  email            String    @unique
  firstName        String
  lastName         String
  mxeTag           String   @unique
  isAccountVerified Boolean   @default(false)
  role    Role   @default(USER)
  profilePicture   String?
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)  
  userId           String    @unique
  wallet Wallet?
  accountVerification   AccountVerification?
  bvn             String?
  nationalIdCardUrl    String?
  walletTransactions WalletTransaction[] @relation("owner")
  createdAt         DateTime  @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  ADMIN
  USER
}

model Wallet{
  id              String      @id @default(uuid())
  account         Account     @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  email            String      @unique
  accountId         String      @unique
  balance         Float       @default(0)
  createdAt       DateTime  @default(now())
  updatedAt DateTime    @updatedAt
  userBeneficiaries User[] @relation("beneficiaries")
}

model WalletTransaction {
  id              String      @id @default(uuid())
  account Account @relation(name: "owner", fields: [accountEmail], references: [email], onUpdate: Cascade)
  accountEmail String
  isInflow Boolean
  paymentMethod PaymentMethod
  status TransactionStatus @default(PENDING)
  amount Float
  type TransactionType @default(TRANSFER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum PaymentMethod {
  DEFI
  CARD
  TRANSFER
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum TransactionType {
  TRANSFER
  PAYMENT
  BILL_PAYMENT
  WITHDRAWAL
  DEPOSIT
}

model AccountVerification {
  id              String      @id @default(uuid())
  account         Account      @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)  
  accountId           String    @unique
  verificationStatus  VerificationStatus   @default(UN_VERIFIED)
  createdAt DateTime @default(now())
  dateVerified  DateTime @updatedAt
}

enum VerificationStatus {
  PENDING
  VERIFIED
  UN_VERIFIED
}
